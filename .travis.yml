---
language: python
python: "2.7"

env:
  - SITE=test.yml

before_install:
  - sudo apt-get update -qq
  - sudo apt-get install -y curl python-pip python-apt gcc
  - cat /etc/*release

install:
  # Install Ansible.
  - pip install ansible

  # Add ansible.cfg to pick up roles path.
  - printf '[defaults]\nroles_path = ../' > ansible.cfg
  - printf '\n127.0.0.1 example.com' | sudo tee -a /etc/hosts
 
script:
  # Check the role/playbook's syntax.

  - ansible-playbook -i tests/inventory/test tests/$SITE --syntax-check

  #  
  #                CREATE HTTP DEPLOYMENT
  #
  # Run the role/playbook with ansible-playbook.
  - ansible-playbook -i tests/inventory/test tests/$SITE --connection=local --sudo

  # Run the role/playbook again, checking to make sure it's idempotent.
  - >
    ansible-playbook -i tests/inventory/test tests/$SITE --connection=local --sudo
    | grep -q 'changed=1.*failed=0'
    && (echo 'Idempotence test: pass' && exit 0)
    || (echo 'Idempotence test: fail' && exit 1)

  - >
    curl -Is http://example.com/
    | grep -q "HTTP/1.1 200 OK"     
    && (echo 'Apache2 is accessible: pass' && exit 0)      
    || (echo 'Apache2 is accessible: fail' && exit 1)

  - >
    sudo apache2ctl -S
    | grep 80
    | grep -q "example.com"
    && (echo 'Domain is configured: pass' && exit 0)
    || (echo 'Domain is configured: fail' && exit 1)

  - >
    sudo netstat -plnt
    | grep -q 80
    && (echo 'Apache2 is listening: pass' && exit 0)
    || (echo 'Apache2 is listening: fail' && exit 1)

  #  
  #                CREATE HTTPS DEPLOYMENT
  #
  # Run the role/playbook with ansible-playbook.
  - ansible-playbook -i tests/inventory/test tests/$SITE -e "SSL=true port=443" --connection=local --sudo

  # Run the role/playbook again, checking to make sure it's idempotent.
  - >
    ansible-playbook -i tests/inventory/test tests/$SITE -e "SSL=true port=443" --connection=local --sudo
    | grep -q 'changed=1.*failed=0'
    && (echo 'Idempotence test: pass' && exit 0)
    || (echo 'Idempotence test: fail' && exit 1)

  - >
    curl -Is --insecure https://example.com/
    | grep -q "HTTP/1.1 200 OK"     
    && (echo 'Apache2 is accessible: pass' && exit 0)      
    || (echo 'Apache2 is accessible: fail' && exit 1)

  - curl -I http://example.com/

  - >
    sudo apache2ctl -S
    | grep 443
    | grep -q "example.com"
    && (echo 'Domain is configured: pass' && exit 0)
    || (echo 'Domain is configured: fail' && exit 1)

  - >
    sudo netstat -plnt
    | grep -q 443
    && (echo 'Apache2 is listening: pass' && exit 0)
    || (echo 'Apache2 is listening: fail' && exit 1)

  #  
  #                CREATE Passenger HTTP DEPLOYMENT
  #
  # Run the role/playbook with ansible-playbook.
  #

  - git clone https://github.com/configuresystems/ansible-passenger.git ../ansible-passenger

  - ansible-playbook -i ../ansible-passenger/tests/inventory/test ../ansible-passenger/tests/$SITE --syntax-check

  - ansible-playbook -i ../ansible-passenger/tests/inventory/test ../ansible-passenger/tests/$SITE --connection=local --sudo

  - >
    ansible-playbook -i ../ansible-passenger/tests/inventory/test ../ansible-passenger/tests/$SITE --connection=local --sudo
    | grep -q 'changed=1.*failed=0'
    && (echo 'Idempotence test: pass' && exit 0)
    || (echo 'Idempotence test: fail' && exit 1)

  - >
    sudo passenger-config --version
    | grep -q "5.*.*"
    && (echo 'Passenger >= 5 is installed: pass' && exit 0)
    || (echo 'Passenger >= 5 is installed: fail' && exit 1)
 
  - >
    sudo apache2ctl -M
    | grep -iq passenger
    && (echo 'Passenger Mod is configured: pass' && exit 0)
    || (echo 'Passenger Mod is configured: fail' && exit 1)

  - ansible-playbook -i tests/inventory/test tests/$SITE -e "PASSENGER=true" --connection=local --sudo

  # Run the role/playbook again, checking to make sure it's idempotent.
  - >
    ansible-playbook -i tests/inventory/test tests/$SITE -e "PASSENGER=true" --connection=local --sudo
    | grep -q 'changed=1.*failed=0'
    && (echo 'Idempotence test: pass' && exit 0)
    || (echo 'Idempotence test: fail' && exit 1)

  - >
    curl -Is http://example.com/
    | grep -q "HTTP/1.1 200 OK"     
    && (echo 'Apache2 is accessible: pass' && exit 0)      
    || (echo 'Apache2 is accessible: fail' && exit 1)

  - >
    sudo apache2ctl -S
    | grep 80
    | grep -q "example.com"
    && (echo 'Domain is configured: pass' && exit 0)
    || (echo 'Domain is configured: fail' && exit 1)

  - >
    sudo netstat -plnt
    | grep -q 80
    && (echo 'Apache2 is listening: pass' && exit 0)
    || (echo 'Apache2 is listening: fail' && exit 1)
